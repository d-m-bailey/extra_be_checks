#! /bin/bash

# Script to run a simplifed setup for CVC

# Requires a netlist $WORK_ROOT/ext/$DESIGN_NAME.gds.spice
# Converts this netlist to $WORK_ROOT/ext/$DESIGN_NAME.cdl.gz

export DESIGN_NAME=$1

# Check for LVS_ROOT
if [[ -z "$LVS_ROOT" ]]; then
	echo "LVS_ROOT not set."
	exit 1
fi

echo "WORK_ROOT   : ${WORK_ROOT:=$(pwd)/$DESIGN_NAME}"
echo "LOG_ROOT    : ${LOG_ROOT:=$(pwd)/$DESIGN_NAME}"
echo "SIGNOFF_ROOT: ${SIGNOFF_ROOT:=$(pwd)/$DESIGN_NAME}"
export LOG_ROOT SIGNOFF_ROOT WORK_ROOT

mkdir -p $LOG_ROOT $SIGNOFF_ROOT $WORK_ROOT

export RESULTS_DIR=$WORK_ROOT/ext
rm -f $LOG_ROOT/cvc.log $LOG_ROOT/cvc.error.gz $SIGNOFF_ROOT/cvc.log $SIGNOFF_ROOT/cvc.error.gz

echo " "
echo "Running CVC..."

# Create cdl file from extracted spice file if it doesn't exist
if [[ ! -f $RESULTS_DIR/$DESIGN_NAME.cdl.gz || $RESULTS_DIR/$DESIGN_NAME.gds.spice -nt $RESULTS_DIR/$DESIGN_NAME.cdl.gz ]]; then
	if [[ ! -f $RESULTS_DIR/$DESIGN_NAME.gds.spice ]]; then
		echo "Could not create cdl file from $RESULTS_DIR/$DESIGN_NAME.gds.spice"
		exit 2
	else
		echo "Creating $RESULTS_DIR/$DESIGN_NAME.cdl"
		$LVS_ROOT/spi2cdl $RESULTS_DIR/$DESIGN_NAME.gds.spice |
			gzip -c >$RESULTS_DIR/$DESIGN_NAME.cdl.gz
	fi
fi

# Copy default power file to work area if it doesn't exist
shopt -u nocasematch
BASE_NAME=${DESIGN_NAME//[A-Z0-9][A-Z0-9]_}  # remove leading 2 byte prefices
if [[ ! -f $WORK_ROOT/$DESIGN_NAME.power ]]; then
	if [[ -f $LVS_ROOT/cvc/$BASE_NAME.$PDK.power ]]; then
		cp $LVS_ROOT/cvc/$BASE_NAME.$PDK.power $WORK_ROOT/$DESIGN_NAME.power
	else
		echo "
ERROR: Could not find $WORK_ROOT/$DESIGN_NAME.power"
		exit 2
	fi
fi

# Copy default configuration file
if [[ ! -f $WORK_ROOT/cvcrc.$PDK ]]; then
	if [[ -f $LVS_ROOT/cvc/cvcrc.$PDK ]]; then
		cp $LVS_ROOT/cvc/cvcrc.$PDK $WORK_ROOT/.
	else
		echo "
ERROR: Could not file $WORK_ROOT/cvcrc.$PDK"
	fi
fi

start_time=$SECONDS
cvc_rv $WORK_ROOT/cvcrc.$PDK
cvc_status=$?

runtime=$((SECONDS - start_time))
hours=$((runtime / 3600))
minutes=$(((runtime % 3600) / 60))
seconds=$(((runtime % 3600) % 60))
printf "Runtime: %d:%02d:%02d (hh:mm:ss)\n" $hours $minutes $seconds >>$WORK_ROOT/cvc.log

if [[ $WORK_ROOT != $LOG_ROOT ]]; then
	cp $WORK_ROOT/cvc.log $LOG_ROOT/.
fi
if [[ $WORK_ROOT != $SIGNOFF_ROOT ]]; then
	cp $WORK_ROOT/cvc.error.gz $SIGNOFF_ROOT/.
fi

if [[ $cvc_status -eq 0 && $(grep '^CVC: End:' $WORK_ROOT/cvc.log | wc -l) -ne 1 ]]; then
	# CVC finished abnormally
	exit 3

elif [[ $cvc_status -eq 0 && $(awk '/^CVC: Total:/ {print $NF}' $WORK_ROOT/cvc.log) -gt 0 ]]; then
	# CVC finished normally, but detected errors
	exit 4

else
	exit $cvc_status
fi
