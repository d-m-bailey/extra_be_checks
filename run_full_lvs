#! /bin/bash
#   run_full_lvs: extract (if necessary) and run lvs with netgen 

#   Copyright 2022 D. Mitch Bailey  cvc at shuharisystem dot com

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#   
#       http://www.apache.org/licenses/LICENSE-2.0
#   
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# Overview:
#  1. Extract gds_file (if given)
#  2. Remove well connections and disconnected nets.
#  3. Extract gds_file without well connectivity.
#  4. Remove disconnected nets.
#  
#  Add verilog files to 'verilog_files'
#  Add spice files to 'spice_files'
#  Add cells to be flattened before extract to 'flatten' file
#  Add cells not to be flattened during compare to 'noflatten' file

# Use cases
# run_full_lvs top_netlist_block netlist top_layout_block gds_file : extract and then compare
# run_full_lvs top_netlist_block netlist top_layout_block	   : compare
if [[ $# -lt 1 || $# -gt 4 ]]; then
	echo "usage: run_full_lvs top_netlist_block [netlist [top_layout_block [gds_file]]]"
	exit
fi

export TOP_NET=$1
if [[ $# -ge 2 ]]; then
	export NETLIST=$2
else
	export NETLIST=../verilog/gl/$TOP_NET.v
fi
if [[ $# -ge 3 ]]; then
	export TOP_LAYOUT=$3
else
	export TOP_LAYOUT=$TOP_NET
fi

: "${LOG_ROOT:=$(pwd)}"
: "${LVS_ROOT:=$(pwd)}"
: "${SIGNOFF_ROOT:=$(pwd)}"
: "${WORK_ROOT:=$(pwd)}"
export LOG_ROOT LVS_ROOT SIGNOFF_ROOT WORK_ROOT

if [[ ! -f $WORK_ROOT/$TOP_LAYOUT.flatglob && $LVS_ROOT/flatglob ]]; then
	echo "Warning: using $LVS_ROOT/flatglob for $WORK_ROOT/$TOP_LAYOUT.flatglob"
	cp $LVS_ROOT/flatglob $WORK_ROOT/$TOP_LAYOUT.flatglob
fi

# create work abstract file based on actual cells used (pseudo globbing)
if [[ ! -f $WORK_ROOT/$TOP_LAYOUT.abstract && -f $LVS_ROOT/abstract ]]; then
	cp $LVS_ROOT/abstract $WORK_ROOT/$TOP_LAYOUT.abstract
fi
if [[ -f $WORK_ROOT/$TOP_LAYOUT.abstract && -f $WORK_ROOT/gds_text/$TOP_LAYOUT.cells ]]; then
	sed -e 's/\*/.*/g' -e 's/^/^/' -e 's/$/$/' $WORK_ROOT/$TOP_LAYOUT.abstract | \
		grep -f - $WORK_ROOT/gds_text/$TOP_LAYOUT.cells > $WORK_ROOT/$TOP_LAYOUT.abstract.glob
fi

# create work noflatten file based on actual cells used (pseudo globbing)
if [[ ! -f $WORK_ROOT/$TOP_NET.flatten && $LVS_ROOT/flatten ]]; then
	echo "Warning: using $LVS_ROOT/flatten for $WORK_ROOT/$TOP_NET.flatten"
	cp $LVS_ROOT/flatten $WORK_ROOT/$TOP_NET.flatten
fi
if [[ -f $WORK_ROOT/$TOP_NET.flatten ]]; then
	if [[ -f $WORK_ROOT/gds_text/$TOP_LAYOUT.cells ]]; then
		sed -e 's/\*/.*/g' -e 's/^/^/' -e 's/$/$/' $WORK_ROOT/$TOP_NET.flatten | \
			grep -f - $WORK_ROOT/gds_text/$TOP_LAYOUT.cells > $WORK_ROOT/$TOP_NET.flatten.layout
		sed -e 's/^\([A-Z][A-Z0-9]_\)*//g' $WORK_ROOT/$TOP_NET.flatten.layout | \
			sort -u - $WORK_ROOT/$TOP_NET.flatten.layout > $WORK_ROOT/$TOP_NET.flatten.glob
	else
		cp $WORK_ROOT/$TOP_NET.flatten $WORK_ROOT/$TOP_NET.flatten.glob
	fi
fi

# create work noflatten file based on actual cells used (pseudo globbing)
if [[ ! -f $WORK_ROOT/$TOP_NET.noflatten && $LVS_ROOT/noflatten ]]; then
	echo "Warning: using $LVS_ROOT/noflatten for $WORK_ROOT/$TOP_NET.noflatten"
	cp $LVS_ROOT/noflatten $WORK_ROOT/$TOP_NET.noflatten
fi
if [[ -f $WORK_ROOT/$TOP_NET.noflatten ]]; then
	if [[ -f $WORK_ROOT/gds_text/$TOP_LAYOUT.cells ]]; then
		sed -e 's/\*/.*/g' -e 's/^/^/' -e 's/$/$/' $WORK_ROOT/$TOP_NET.noflatten | \
			grep -f - $WORK_ROOT/gds_text/$TOP_LAYOUT.cells > $WORK_ROOT/$TOP_NET.noflatten.layout
		sed -e 's/^\([A-Z][A-Z0-9]_\)*//g' $WORK_ROOT/$TOP_NET.noflatten.layout | \
			sort -u - $WORK_ROOT/$TOP_NET.noflatten.layout > $WORK_ROOT/$TOP_NET.noflatten.glob
	else
		cp $WORK_ROOT/$TOP_NET.noflatten $WORK_ROOT/$TOP_NET.noflatten.glob
	fi
fi

# create work ignore file based on actual cells used (pseudo globbing)
if [[ ! -f $WORK_ROOT/$TOP_NET.ignore && -f $LVS_ROOT/ignore ]]; then
	echo "Warning: using $LVS_ROOT/ignore for $WORK_ROOT/$TOP_NET.ignore"
	cp $LVS_ROOT/ignore $WORK_ROOT/$TOP_NET.ignore
fi
if [[ -f $WORK_ROOT/$TOP_NET.ignore ]]; then
	if [[ -f $WORK_ROOT/gds_text/$TOP_LAYOUT.cells ]]; then
		sed -e 's/\*/.*/g' -e 's/^/^/' -e 's/$/$/' $WORK_ROOT/$TOP_NET.ignore | \
			grep -f - $WORK_ROOT/gds_text/$TOP_LAYOUT.cells > $WORK_ROOT/$TOP_NET.ignore.layout
		sed -e 's/^\([A-Z][A-Z0-9]_\)*//g' $WORK_ROOT/$TOP_NET.ignore.layout | \
			sort -u - $WORK_ROOT/$TOP_NET.ignore.layout > $WORK_ROOT/$TOP_NET.ignore.glob
	else
		cp $WORK_ROOT/$TOP_NET.ignore $WORK_ROOT/$TOP_NET.ignore.glob
	fi
fi

# Add any cells that should be flattened before extraction to 'flatten'. globbing allowed.
export FLATGLOB_CELLS="`cat $WORK_ROOT/$TOP_LAYOUT.flatglob 2>/dev/null | grep -v '^#'`"
# Add any empty cells that should be extracted as black-boxes to 'abstract'. globbing not allowed.
export ABSTRACT_CELLS="`cat $WORK_ROOT/$TOP_LAYOUT.abstract.glob 2>/dev/null | grep -v '^#'`"

if [[ ! -f $WORK_ROOT/$TOP_NET.spice_files ]]; then
	echo "Warning: using $LVS_ROOT/spice_files for $WORK_ROOT/$TOP_NET.spice_files"
	cp $LVS_ROOT/spice_files $WORK_ROOT/$TOP_NET.spice_files
fi

# Verify that magic and netgen are executable.
if [[ $# == 4 ]]; then  # only if gds is specified
	which magic >& /dev/null
	if [[ $? != 0 ]]; then
		echo "Error: Could not execute magic."
		exit 1
	fi
fi
which netgen >& /dev/null
if [[ $? != 0 ]]; then
	echo "Error: Could not execute netgen."
	exit 1
fi

#  Create extraction result directories. No error if they already exist.
EXT_DIR=$WORK_ROOT/$TOP_LAYOUT.ext
mkdir -p $EXT_DIR

if [[ $# -lt 4 ]]; then
	# No gds_file so LVS only. Check for existing extraction results.
	if [[ ! -f $EXT_DIR/$TOP_LAYOUT.gds.spice ]]; then
		echo "Error: missing $EXT_DIR/$TOP_LAYOUT.gds.spice"
		echo "Specify gds_file to create"
		echo "usage: run_full_lvs top_netlist_block netlist top_layout_block [gds_file]"
		exit
	fi
else
	# Specified gds_file, so extract it.
	export CURRENT_GDS=$4

	if [[ ! -f $CURRENT_GDS ]]; then
		echo "Error: File not found: $CURRENT_GDS"
		exit 2
	fi

	# Remove any previous extraction results
	rm -rf $EXT_DIR/*.ext{,.gz}

	#  1. Extract gds_file 
	#  Note: uses the same extraction commands as sconnect, so symbolic links to the EXT_DIR may be used
	date "+BEGIN: %c" > $LOG_ROOT/$TOP_LAYOUT.ext.log
	start_time=$SECONDS

	if [[ ${NETLIST##*.} == "spice" ]]; then
		echo "Extracting as analog. Top ports connected by name."
		EXT_TYPE=analog
	else
		echo "Extracting as digital. Top ports unique."
		EXT_TYPE=digital
	fi

	env TOP=$TOP_LAYOUT RUN_DIR=$EXT_DIR magic -dnull -noc -rcfile $LVS_ROOT/tech/magicrc.sky130B $LVS_ROOT/scripts/gds.$EXT_TYPE.spice.tcl < /dev/null | \
		tee -a $LOG_ROOT/$TOP_LAYOUT.ext.log 2>&1

	date "+END: %c" >> $LOG_ROOT/$TOP_LAYOUT.ext.log
	runtime=$(( SECONDS - start_time ))
	hours=$((runtime / 3600))
	minutes=$(( (runtime % 3600) / 60 ))
	seconds=$(( (runtime % 3600) % 60 ))
	printf "Runtime: %d:%02d:%02d (hh:mm:ss)\n" $hours $minutes $seconds >> $LOG_ROOT/$TOP_LAYOUT.ext.log

	# Compress large ext files
	find $EXT_DIR -name '*.ext' -size +1M -exec gzip {} \;
fi

#  5. Compare
cp $LVS_ROOT/tech/sky130B_setup.tcl $WORK_ROOT/$TOP_NET.sky130B_setup.tcl
shopt -s nullglob

awk '
/^#/ { next; }
FILENAME ~ /flatten.glob/ {
	print "if { [lsearch $cells1", $1, "] > 0 } {";
	print "	puts stdout \"Flattening", $1, "in layout\"";
	print "	flatten class {-circuit1", $1, "}";
	print "}";
	print "if { [lsearch $cells2", $1, "] > 0 } {";
	print "	puts stdout \"Flattening", $1, "in netlist\"";
	print "	flatten class {-circuit2", $1, "}";
	print "}";
}
FILENAME ~ /ignore.glob/ {
	print "if { [lsearch $cells1", $1, "] > 0 } {";
	print "	puts stdout \"Ignoring", $1, "in layout\"";
	print "	ignore class {-circuit1", $1, "}";
	print "}";
	print "if { [lsearch $cells2", $1, "] > 0 } {";
	print "	puts stdout \"Flattening", $1, "in netlist\"";
	print "	ignore class {-circuit2", $1, "}";
	print "}";
}' $WORK_ROOT/$TOP_NET.flatte[n].glob $WORK_ROOT/$TOP_NET.ignor[e].glob /dev/null >> $WORK_ROOT/$TOP_NET.sky130B_setup.tcl

awk '
/^#/ { next; }
FILENAME ~ /spice_files/ {
	print "puts \"Reading spice netlist file", $1 "\"";
	print "readnet spice", $1, 1;
}
FILENAME ~ /verilog_files/ {
	print "puts \"Reading verilog netlist file", $1 "\"";
	print "readnet verilog", $1, 1;
}
END {
	print "lvs {'$EXT_DIR/$TOP_LAYOUT.gds.spice' '$TOP_LAYOUT'} {'$NETLIST' '$TOP_NET'} '$WORK_ROOT/$TOP_NET'.sky130B_setup.tcl '$SIGNOFF_ROOT/$TOP_NET'.lvs.report -blackbox -json -noflatten='$WORK_ROOT/$TOP_NET.noflatten.glob'"
}' $WORK_ROOT/$TOP_NET.spice_file[s] $WORK_ROOT/$TOP_NET.verilog_file[s] /dev/null > $WORK_ROOT/$TOP_NET.setup_file.lvs

date "+BEGIN: %c" > $LOG_ROOT/$TOP_NET.lvs.log
start_time=$SECONDS

netgen -batch source $WORK_ROOT/$TOP_NET.setup_file.lvs 2>&1 | \
	tee -a $LOG_ROOT/$TOP_NET.lvs.log 

awk '
/Circuit 1 .* will not flatten/ {print $4, "is a black box in the layout"}
/Circuit 2 .* will not flatten/ {print $4, "is a black box in the netlist"}
' $SIGNOFF_ROOT/$TOP_NET.lvs.report > $SIGNOFF_ROOT/$TOP_NET.unflattened
awk '
/__fill/ {next}
/__tapvpwrvgnd/ {next}
/__fakediode/ {next}
/sky130_fd_pr__/ {next}
/Matching pins/ {print $4, "is a black box in the layout and netlist"}
' $LOG_ROOT/$TOP_NET.lvs.log >> $SIGNOFF_ROOT/$TOP_NET.unflattened
if [[ -s $SIGNOFF_ROOT/$TOP_NET.unflattened ]]; then
	echo "Warning: device level LVS may be incomplete due to $(cat $SIGNOFF_ROOT/$TOP_NET.unflattened | wc -l) unflattened cell(s): see $SIGNOFF_ROOT/$TOP_NET.unflattened" | \
		tee -a $SIGNOFF_ROOT/$TOP_NET.lvs.report | \
		tee -a $LOG_ROOT/$TOP_NET.lvs.log
fi

date "+END: %c" >> $LOG_ROOT/$TOP_NET.lvs.log
runtime=$(( SECONDS - start_time ))
hours=$((runtime / 3600))
minutes=$(( (runtime % 3600) / 60 ))
seconds=$(( (runtime % 3600) % 60 ))
printf "Runtime: %d:%02d:%02d (hh:mm:ss)\n" $hours $minutes $seconds >> $LOG_ROOT/$TOP_NET.lvs.log
